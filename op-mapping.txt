0x00 => { 1 },
0x01 => { self.ld_word(self.fetch_ins_word(), Some(RegIndex::BC), 0); 3 },
0x02 => { self.ld_byte(self.regs.a(), None, self.regs.bc()); 2 },
0x03 => { self.inc(Some(RegIndex::BC), 0); 2 },
0x04 => { self.inc(Some(RegIndex::B), 0); 1 },
0x05 => { self.dec(Some(RegIndex::B), 0); 1 },
0x06 => { self.ld_byte(self.fetch_ins_byte(), Some(RegIndex::B), 0); 2 },
0x07 => { self.rlca(); 1 },
0x08 => { self.ld_word(self.regs.sp(), None, self.fetch_ins_word()); 5 },
0x09 => { self.add_word(self.regs.bc(), RegIndex::HL); 2 },
0x0a => { self.ld_byte(self.mmu.read_byte(self.regs.bc()), Some(RegIndex::A), 0); 2 },
0x0b => { self.dec(Some(RegIndex::BC), 0); 2 },
0x0c => { self.inc(Some(RegIndex::C), 0); 1 },
0x0d => { self.dec(Some(RegIndex::C), 0); 1 },
0x0e => { self.ld_byte(self.fetch_ins_byte(), Some(RegIndex::C), 0); 2 },
0x0f => { self.rrca(); 1 },
0x10 => { self.stop(); 1 },
0x11 => { self.ld_word(self.fetch_ins_word(), Some(RegIndex::DE), 0); 3 },
0x12 => { self.ld_byte(self.regs.a(), None, self.regs.de()); 2 },
0x13 => { self.inc(Some(RegIndex::DE), 0); 2 },
0x14 => { self.inc(Some(RegIndex::D), 0); 1 },
0x15 => { self.dec(Some(RegIndex::D), 0); 1 },
0x16 => { self.ld_byte(self.fetch_ins_byte(), Some(RegIndex::D), 0); 2 },
0x17 => { self.rla(); 1 },
0x18 => { self.jr(None); 3 },
0x19 => { self.add_word(self.regs.de(), RegIndex::HL); 2 },
0x1a => { self.ld_byte(self.mmu.read_byte(self.regs.de()), Some(RegIndex::A), 0); 2 },
0x1b => { self.dec(Some(RegIndex::DE), 0); 2 },
0x1c => { self.inc(Some(RegIndex::E), 0); 1 },
0x1d => { self.dec(Some(RegIndex::E), 0); 1 },
0x1e => { self.ld_byte(self.fetch_ins_byte(), Some(RegIndex::E), 0); 2 },
0x1f => { self.rra(); 1 },
0x20 => { self.jr(Some(Condition::NZ)) as u8 + 3/2 },
0x21 => { self.ld_word(self.fetch_ins_word(), Some(RegIndex::HL), 0); 3 },
0x22 => { self.ld_byte(self.regs.a(), None, self.regs.hl()); self.regs.set_hl(self.regs.hl().wrapping_add(1)); 2 },
0x23 => { self.inc(Some(RegIndex::HL), 0); 2 },
0x24 => { self.inc(Some(RegIndex::H), 0); 1 },
0x25 => { self.dec(Some(RegIndex::H), 0); 1 },
0x26 => { self.ld_byte(self.fetch_ins_byte(), Some(RegIndex::H), 0); 2 },
0x27 => { self.daa(); 1 },
0x28 => { self.jr(Some(Condition::Z)) as u8 + 3/2 },
0x29 => { self.add_word(self.regs.hl(), RegIndex::HL); 2 },
0x2a => { self.ld_byte(self.mmu.read_byte(self.regs.hl()), Some(RegIndex::A), 0); self.regs.set_hl(self.regs.hl().wrapping_add(1)); 2 },
0x2b => { self.dec(Some(RegIndex::HL), 0); 2 },
0x2c => { self.inc(Some(RegIndex::L), 0); 1 },
0x2d => { self.dec(Some(RegIndex::L), 0); 1 },
0x2e => { self.ld_byte(self.fetch_ins_byte(), Some(RegIndex::L), 0); 2 },
0x2f => { self.cpl(); 1 },
0x30 => { self.jr(Some(Condition::NC)) as u8 + 3/2 },
0x31 => { self.ld_word(self.fetch_ins_word(), Some(RegIndex::SP), 0); 3 },
0x32 => { self.ld_byte(self.regs.a(), None, self.regs.hl()); self.regs.set_hl(self.regs.hl().wrapping_sub(1)); 2 },
0x33 => { self.inc(Some(RegIndex::SP), 0); 2 },
0x34 => { self.inc(None, self.regs.hl()); 3 },
0x35 => { self.dec(None, self.regs.hl()); 3 },
0x36 => { self.ld_byte(self.fetch_ins_byte(), None, self.regs.hl()); 3 },
0x37 => { self.scf(); 1 },
0x38 => { self.jr(Some(Condition::C)) as u8 + 3/2 },
0x39 => { self.add_word(self.regs.sp(), RegIndex::HL); 2 },
0x3a => { self.ld_byte(self.mmu.read_byte(self.regs.hl()), Some(RegIndex::A), 0); self.regs.set_hl(self.regs.hl().wrapping_sub(1)); 2 },
0x3b => { self.dec(Some(RegIndex::SP), 0); 2 },
0x3c => { self.inc(Some(RegIndex::A), 0); 1 },
0x3d => { self.dec(Some(RegIndex::A), 0); 1 },
0x3e => { self.ld_byte(self.fetch_ins_byte(), Some(RegIndex::A), 0); 2 },
0x3f => { self.ccf(); 1 },
0x40 => { self.ld_byte(self.regs.b(), Some(RegIndex::B), 0); 1 },
0x41 => { self.ld_byte(self.regs.c(), Some(RegIndex::B), 0); 1 },
0x42 => { self.ld_byte(self.regs.d(), Some(RegIndex::B), 0); 1 },
0x43 => { self.ld_byte(self.regs.e(), Some(RegIndex::B), 0); 1 },
0x44 => { self.ld_byte(self.regs.h(), Some(RegIndex::B), 0); 1 },
0x45 => { self.ld_byte(self.regs.l(), Some(RegIndex::B), 0); 1 },
0x46 => { self.ld_byte(self.mmu.read_byte(self.regs.hl()), Some(RegIndex::B), 0); 2 },
0x47 => { self.ld_byte(self.regs.a(), Some(RegIndex::B), 0); 1 },
0x48 => { self.ld_byte(self.regs.b(), Some(RegIndex::C), 0); 1 },
0x49 => { self.ld_byte(self.regs.c(), Some(RegIndex::C), 0); 1 },
0x4a => { self.ld_byte(self.regs.d(), Some(RegIndex::C), 0); 1 },
0x4b => { self.ld_byte(self.regs.e(), Some(RegIndex::C), 0); 1 },
0x4c => { self.ld_byte(self.regs.h(), Some(RegIndex::C), 0); 1 },
0x4d => { self.ld_byte(self.regs.l(), Some(RegIndex::C), 0); 1 },
0x4e => { self.ld_byte(self.mmu.read_byte(self.regs.hl()), Some(RegIndex::C), 0); 2 },
0x4f => { self.ld_byte(self.regs.a(), Some(RegIndex::C), 0); 1 },
0x50 => { self.ld_byte(self.regs.b(), Some(RegIndex::D), 0); 1 },
0x51 => { self.ld_byte(self.regs.c(), Some(RegIndex::D), 0); 1 },
0x52 => { self.ld_byte(self.regs.d(), Some(RegIndex::D), 0); 1 },
0x53 => { self.ld_byte(self.regs.e(), Some(RegIndex::D), 0); 1 },
0x54 => { self.ld_byte(self.regs.h(), Some(RegIndex::D), 0); 1 },
0x55 => { self.ld_byte(self.regs.l(), Some(RegIndex::D), 0); 1 },
0x56 => { self.ld_byte(self.mmu.read_byte(self.regs.hl()), Some(RegIndex::D), 0); 2 },
0x57 => { self.ld_byte(self.regs.a(), Some(RegIndex::D), 0); 1 },
0x58 => { self.ld_byte(self.regs.b(), Some(RegIndex::E), 0); 1 },
0x59 => { self.ld_byte(self.regs.c(), Some(RegIndex::E), 0); 1 },
0x5a => { self.ld_byte(self.regs.d(), Some(RegIndex::E), 0); 1 },
0x5b => { self.ld_byte(self.regs.e(), Some(RegIndex::E), 0); 1 },
0x5c => { self.ld_byte(self.regs.h(), Some(RegIndex::E), 0); 1 },
0x5d => { self.ld_byte(self.regs.l(), Some(RegIndex::E), 0); 1 },
0x5e => { self.ld_byte(self.mmu.read_byte(self.regs.hl()), Some(RegIndex::E), 0); 2 },
0x5f => { self.ld_byte(self.regs.a(), Some(RegIndex::E), 0); 1 },
0x60 => { self.ld_byte(self.regs.b(), Some(RegIndex::H), 0); 1 },
0x61 => { self.ld_byte(self.regs.c(), Some(RegIndex::H), 0); 1 },
0x62 => { self.ld_byte(self.regs.d(), Some(RegIndex::H), 0); 1 },
0x63 => { self.ld_byte(self.regs.e(), Some(RegIndex::H), 0); 1 },
0x64 => { self.ld_byte(self.regs.h(), Some(RegIndex::H), 0); 1 },
0x65 => { self.ld_byte(self.regs.l(), Some(RegIndex::H), 0); 1 },
0x66 => { self.ld_byte(self.mmu.read_byte(self.regs.hl()), Some(RegIndex::H), 0); 2 },
0x67 => { self.ld_byte(self.regs.a(), Some(RegIndex::H), 0); 1 },
0x68 => { self.ld_byte(self.regs.b(), Some(RegIndex::L), 0); 1 },
0x69 => { self.ld_byte(self.regs.c(), Some(RegIndex::L), 0); 1 },
0x6a => { self.ld_byte(self.regs.d(), Some(RegIndex::L), 0); 1 },
0x6b => { self.ld_byte(self.regs.e(), Some(RegIndex::L), 0); 1 },
0x6c => { self.ld_byte(self.regs.h(), Some(RegIndex::L), 0); 1 },
0x6d => { self.ld_byte(self.regs.l(), Some(RegIndex::L), 0); 1 },
0x6e => { self.ld_byte(self.mmu.read_byte(self.regs.hl()), Some(RegIndex::L), 0); 2 },
0x6f => { self.ld_byte(self.regs.a(), Some(RegIndex::L), 0); 1 },
0x70 => { self.ld_byte(self.regs.b(), None, self.regs.hl()); 2 },
0x71 => { self.ld_byte(self.regs.c(), None, self.regs.hl()); 2 },
0x72 => { self.ld_byte(self.regs.d(), None, self.regs.hl()); 2 },
0x73 => { self.ld_byte(self.regs.e(), None, self.regs.hl()); 2 },
0x74 => { self.ld_byte(self.regs.h(), None, self.regs.hl()); 2 },
0x75 => { self.ld_byte(self.regs.l(), None, self.regs.hl()); 2 },
0x76 => { self.halt(); 1 },
0x77 => { self.ld_byte(self.regs.a(), None, self.regs.hl()); 2 },
0x78 => { self.ld_byte(self.regs.b(), Some(RegIndex::A), 0); 1 },
0x79 => { self.ld_byte(self.regs.c(), Some(RegIndex::A), 0); 1 },
0x7a => { self.ld_byte(self.regs.d(), Some(RegIndex::A), 0); 1 },
0x7b => { self.ld_byte(self.regs.e(), Some(RegIndex::A), 0); 1 },
0x7c => { self.ld_byte(self.regs.h(), Some(RegIndex::A), 0); 1 },
0x7d => { self.ld_byte(self.regs.l(), Some(RegIndex::A), 0); 1 },
0x7e => { self.ld_byte(self.mmu.read_byte(self.regs.hl()), Some(RegIndex::A), 0); 2 },
0x7f => { self.ld_byte(self.regs.a(), Some(RegIndex::A), 0); 1 },
0x80 => { self.add_byte(self.regs.b(), false); 1 },
0x81 => { self.add_byte(self.regs.c(), false); 1 },
0x82 => { self.add_byte(self.regs.d(), false); 1 },
0x83 => { self.add_byte(self.regs.e(), false); 1 },
0x84 => { self.add_byte(self.regs.h(), false); 1 },
0x85 => { self.add_byte(self.regs.l(), false); 1 },
0x86 => { self.add_byte(self.mmu.read_byte(self.regs.hl()), false); 2 },
0x87 => { self.add_byte(self.regs.a(), false); 1 },
0x88 => { self.add_byte(self.regs.b(), true); 1 },
0x89 => { self.add_byte(self.regs.c(), true); 1 },
0x8a => { self.add_byte(self.regs.d(), true); 1 },
0x8b => { self.add_byte(self.regs.e(), true); 1 },
0x8c => { self.add_byte(self.regs.h(), true); 1 },
0x8d => { self.add_byte(self.regs.l(), true); 1 },
0x8e => { self.add_byte(self.mmu.read_byte(self.regs.hl()), true); 2 },
0x8f => { self.add_byte(self.regs.a(), true); 1 },
0x90 => { self.sub_byte(self.regs.b(), false); 1 },
0x91 => { self.sub_byte(self.regs.c(), false); 1 },
0x92 => { self.sub_byte(self.regs.d(), false); 1 },
0x93 => { self.sub_byte(self.regs.e(), false); 1 },
0x94 => { self.sub_byte(self.regs.h(), false); 1 },
0x95 => { self.sub_byte(self.regs.l(), false); 1 },
0x96 => { self.sub_byte(self.mmu.read_byte(self.regs.hl()), false); 2 },
0x97 => { self.sub_byte(self.regs.a(), false); 1 },
0x98 => { self.sub_byte(self.regs.b(), true); 1 },
0x99 => { self.sub_byte(self.regs.c(), true); 1 },
0x9a => { self.sub_byte(self.regs.d(), true); 1 },
0x9b => { self.sub_byte(self.regs.e(), true); 1 },
0x9c => { self.sub_byte(self.regs.h(), true); 1 },
0x9d => { self.sub_byte(self.regs.l(), true); 1 },
0x9e => { self.sub_byte(self.mmu.read_byte(self.regs.hl()), true); 2 },
0x9f => { self.sub_byte(self.regs.a(), true); 1 },
0xa0 => { self.and(self.regs.b()); 1 },
0xa1 => { self.and(self.regs.c()); 1 },
0xa2 => { self.and(self.regs.d()); 1 },
0xa3 => { self.and(self.regs.e()); 1 },
0xa4 => { self.and(self.regs.h()); 1 },
0xa5 => { self.and(self.regs.l()); 1 },
0xa6 => { self.and(self.mmu.read_byte(self.regs.hl())); 2 },
0xa7 => { self.and(self.regs.a()); 1 },
0xa8 => { self.xor(self.regs.b()); 1 },
0xa9 => { self.xor(self.regs.c()); 1 },
0xaa => { self.xor(self.regs.d()); 1 },
0xab => { self.xor(self.regs.e()); 1 },
0xac => { self.xor(self.regs.h()); 1 },
0xad => { self.xor(self.regs.l()); 1 },
0xae => { self.xor(self.mmu.read_byte(self.regs.hl())); 2 },
0xaf => { self.xor(self.regs.a()); 1 },
0xb0 => { self.or(self.regs.b()); 1 },
0xb1 => { self.or(self.regs.c()); 1 },
0xb2 => { self.or(self.regs.d()); 1 },
0xb3 => { self.or(self.regs.e()); 1 },
0xb4 => { self.or(self.regs.h()); 1 },
0xb5 => { self.or(self.regs.l()); 1 },
0xb6 => { self.or(self.mmu.read_byte(self.regs.hl())); 2 },
0xb7 => { self.or(self.regs.a()); 1 },
0xb8 => { self.cp(self.regs.b()); 1 },
0xb9 => { self.cp(self.regs.c()); 1 },
0xba => { self.cp(self.regs.d()); 1 },
0xbb => { self.cp(self.regs.e()); 1 },
0xbc => { self.cp(self.regs.h()); 1 },
0xbd => { self.cp(self.regs.l()); 1 },
0xbe => { self.cp(self.mmu.read_byte(self.regs.hl())); 2 },
0xbf => { self.cp(self.regs.a()); 1 },
0xc0 => { self.ret(Condition::NZ) as u8 + 5/2 },
0xc1 => { self.pop(RegIndex::BC); 3 },
0xc2 => { self.jump(self.fetch_ins_word(), Condition::NZ) as u8 + 4/3 },
0xc3 => { self.jump(self.fetch_ins_word(), None); 4 },
0xc4 => { self.call(Condition::NZ) as u8 + 6/3 },
0xc5 => { self.push(self.regs.bc()); 4 },
0xc6 => { self.add_byte(self.fetch_ins_byte(), false); 2 },
0xc7 => { self.rst(0x00 as u16); 4 },
0xc8 => { self.ret(Condition::Z) as u8 + 5/2 },
0xc9 => { self.ret(None); 4 },
0xca => { self.jump(self.fetch_ins_word(), Condition::Z) as u8 + 4/3 },
0xcb => { self.decode_cb(); 1 },
0xcc => { self.call(Condition::Z) as u8 + 6/3 },
0xcd => { self.call(None); 6 },
0xce => { self.add_byte(self.fetch_ins_byte(), true); 2 },
0xcf => { self.rst(0x08 as u16); 4 },
0xd0 => { self.ret(Condition::NC) as u8 + 5/2 },
0xd1 => { self.pop(RegIndex::DE); 3 },
0xd2 => { self.jump(self.fetch_ins_word(), Condition::NC) as u8 + 4/3 },
0xd3 => { self.undefined_op(); 1 },
0xd4 => { self.call(Condition::NC) as u8 + 6/3 },
0xd5 => { self.push(self.regs.de()); 4 },
0xd6 => { self.sub_byte(self.fetch_ins_byte(), false); 2 },
0xd7 => { self.rst(0x10 as u16); 4 },
0xd8 => { self.ret(Condition::C) as u8 + 5/2 },
0xd9 => { self.ret(None); 4 },
0xda => { self.jump(self.fetch_ins_word(), Condition::C) as u8 + 4/3 },
0xdb => { self.undefined_op(); 1 },
0xdc => { self.call(Condition::C) as u8 + 6/3 },
0xdd => { self.undefined_op(); 1 },
0xde => { self.sub_byte(self.fetch_ins_byte(), true); 2 },
0xdf => { self.rst(0x18 as u16); 4 },
0xe0 => { self.ld_byte(self.regs.a(), None, self.fetch_ins_byte() as u16 + 0xff00); 3 },
0xe1 => { self.pop(RegIndex::HL); 3 },
0xe2 => { self.ld_byte(self.regs.a(),self.regs.c() as u16 + 0xff00); 2 },
0xe3 => { self.undefined_op(); 1 },
0xe4 => { self.undefined_op(); 1 },
0xe5 => { self.push(self.regs.hl()); 4 },
0xe6 => { self.and(self.fetch_ins_byte()); 2 },
0xe7 => { self.rst(0x20 as u16); 4 },
0xe8 => { self.add_word(self.fetch_ins_byte() as i8 as i16 as u16, RegIndex::SP); 4 },
0xe9 => { self.jump(self.regs.hl(), None); 1 },
0xea => { self.ld_byte(self.regs.a(), None, self.fetch_ins_word()); 4 },
0xeb => { self.undefined_op(); 1 },
0xec => { self.undefined_op(); 1 },
0xed => { self.undefined_op(); 1 },
0xee => { self.xor(self.fetch_ins_byte()); 2 },
0xef => { self.rst(0x28 as u16); 4 },
0xf0 => { self.ld_byte(self.mmu.read_byte(self.fetch_ins_byte() as u16 + 0xff00), Some(RegIndex::A), 0); 3 },
0xf1 => { self.pop(RegIndex::AF); 3 },
0xf2 => { self.ld_byte(self.mmu.read_byte(self.regs.c() as u16 + 0xff00), Some(RegIndex::A), 0); 2 },
0xf3 => { self.di(); 1 },
0xf4 => { self.undefined_op(); 1 },
0xf5 => { self.push(self.regs.af()); 4 },
0xf6 => { self.or(self.fetch_ins_byte()); 2 },
0xf7 => { self.rst(0x30 as u16); 4 },
0xf8 => { self.ld_word(self.regs.sp().wrapping_add(self.fetch_ins_byte() as i8 as i16 as u16), Some(RegIndex::HL), 0); self.regs.set_zflag(false); FIX THIS 3 },
0xf9 => { self.ld_word(self.regs.hl(), Some(RegIndex::SP), 0); 2 },
0xfa => { self.ld_byte(self.fetch_ins_word(), Some(RegIndex::A), 0); 4 },
0xfb => { self.ei(); 1 },
0xfc => { self.undefined_op(); 1 },
0xfd => { self.undefined_op(); 1 },
0xfe => { self.cp(self.fetch_ins_byte()); 2 },
0xff => { self.rst(0x38 as u16); 4 },
